/*
 * generated by Xtext 2.28.0
 */
package arg;

import java.io.IOException;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.resource.XtextResourceSet;

import com.google.inject.Injector;

import Ardsl.ArdslPackage;

/**
 * Initialization support for running Xtext languages without Equinox extension registry.
 */
public class ArgStandaloneSetup extends ArgStandaloneSetupGenerated {

	public static void doSetup() {
		new ArgStandaloneSetup().createInjectorAndDoEMFRegistration();
	}
	public static void argToXmi(String input, String output) {
		// register URI of ecore meta-model
		EPackage.Registry.INSTANCE.put(ArdslPackage.eNS_URI, ArdslPackage.eINSTANCE);
		// create resource for xtext file
		Injector injector = new ArgStandaloneSetup().createInjectorAndDoEMFRegistration();
		ResourceSet xtextRS = injector.getInstance(XtextResourceSet.class);
		XtextResource xtextInput = (XtextResource)xtextRS.getResource(URI.createURI(input), true);
		EcoreUtil.resolveAll(xtextInput);
		// create empty xmi resource
		ResourceSet xmiRS = new ResourceSetImpl();
		Resource xmiOutput = xmiRS.createResource(URI.createURI(output));
		// save xtext resource in xmi resource
		xmiOutput.getContents().add(xtextInput.getContents().get(0));
		try {
			xmiOutput.save(null);
		} catch (IOException e) {
		// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
