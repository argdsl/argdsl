// automatically generated by Xtext
grammar arg.Arg with org.eclipse.xtext.common.Terminals

import "http://ardsl/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Ontological returns Ontological:
	'Game'
	name=EString
	'{'
		'elements' '{' classes+=Class ( classes+=Class)* '}' 
	'}'
	graphic=Graphic
	physic=Physic
	game=Game;


Condition returns Condition:
	Not | Binary | Arithmetic;

Value returns Value:
	AttributeValue | ConstantValue | AllInstances;

enum Gesture returns Gesture:
	drag="drag" | tilt="tilt" | touch="touch"
;


EString returns ecore::EString:
	STRING | ID;

Class returns Class:
	name=EString
	'{'
		(attributes+=Attribute ( attributes+=Attribute)*)?
		('dependences' '{' references+=Reference ( references+=Reference)* '}' )?
	'}'
	(abstract?='abstract')?
	(noSCN?='invisible')?;

Graphic returns Graphic:
	'Graphic''{'
	classes+=GraphicClass ( classes+=GraphicClass)*
	'}'
;
Physic returns Physic:
	'Physics''{'
	classes+=PhysicClass ( classes+=PhysicClass)*
	'}'
;

Game returns Game:
	'Gamelogic''{'
	'Display''{'
	'start' start=EString
	'win' win=EString
	'lose' lose=EString
	'score' '{' score=ScoreSystem '}'
	'}' 
	('Actions' '{' actionsTriggers+=Trigger ( actionsTriggers+=Trigger)* '}')?
	('Collisions' '{' collisions+=Collision ( collisions+=Collision)* '}')?
	('Buttons' '{' gamepad+=GamePad ( gamepad+=GamePad)* '}')?
	('Elements' '{' objInit+=ObjInit ( objInit+=ObjInit)* '}')?
	'}'
;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Attribute returns Attribute:
	name=EString ':' type=EString '[' min=EInt '..' max=AttributeMax ']' '=' default=Constant

	(isParam?='isParam')?
	(isKey?='isKey')?
	(readOnly?='readOnly')?;
	
AttributeMax returns ecore::EIntegerObject:
    '*' | INT;
    
Reference returns Reference:
	name=EString
		('containtment' containtment=EString)?
		'min' min=EInt
		'max' max=EInt
		'target' target=EString
		('opposite' opposite=EString)?;

EInt returns ecore::EInt:
	'-'? INT;

GraphicClass returns GraphicClass:
	'element' ontoClass=[Class|EString]
	'versions' '{' versions+=Versions ( versions+=Versions)* '}'
	'constraints' '{' constraints=Constraints '}'
	
;

Constraints returns Constraints:
	'plane' planes=Planes
	overlapping?='overlaps'
	'sizeMin' sizeMin=EDouble
	'sizeMax' sizeMax=EDouble
	'xVariation' xToOriginPos=EDouble
	'yVariation' yToOriginPos=EDouble
	'zVariation' zToOriginPos=EDouble
	'rotation' rotation=EInt
;

Connection returns Connection:
	'Connection'
	name=EString
	'{'
		'type' type=EString
		'color' color=EString
		'textColor' textColor=EString
		'decorator' decorator=EString
		'decoratorPos' decoratorPos=EString
		'pattern' pattern=EString
		'width' width=EDouble
		'position' position=EString
	'}';

Versions returns Versions:
	name=EString '=' URL=EString;

enum Planes returns Planes:
				any = 'any' | horizontal = 'horizontal' | vertical = 'vertical';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

PhysicClass returns PhysicClass:
	'element' ontoClass=[Class|EString]
	'body' '{' physicBody=PhysicBody '}'
	('forces' '{' forces+=Force ( forces+=Force)* '}')?
	('contacts' '{' bitMasks=BitMasks '}')?
;

PhysicBody returns PhysicBody:
	'mass' mass=EDouble
	'bodyType' bodyType=BodyType
	'charge' charge=EDouble
	'friction' friction=EDouble
	'rollingFriction' rollingFriction=EDouble
	'restitution' restitution=EDouble
	'damping' damping=EDouble
	'angularDamping' angularDamping=EDouble
;

BitMasks returns BitMasks:
	'collision' collision+=[Class|EString] ( collision+=[Class|EString])*
	'contact' contact+=[Class|EString] ( contact+=[Class|EString])*
;

Force returns Force:
	name=EString ':' 'gesture' gesture=Gesture
	('[' xVector=EDouble ',' yVector=EDouble ',' zVector=EDouble ']')?
;

enum BodyType returns BodyType:
				static = 'static' | dynamic = 'dynamic' | kinematic = 'kinematic';

GamePad returns GamePad:
	name=EString '->' trigger=[Trigger|EString]
;

ScoreSystem returns ScoreSystem:
	'start' start=EInt
	'finish' finish=NoLimit
	'lives' lives=EInt
;
NoLimit returns ecore::EIntegerObject:
    '*' | INT;

Trigger returns Trigger:
	name=EString '{'
	('action' action=BasicActions)?
	('message' message=EString)?
	('score' scoreChange=EInt)?
	('timeEach' timeTrigger=EInt)?
	('changes' '{' physicChanges+=PhysicChange ( physicChanges+=PhysicChange)* '}' )?
	'}'
;

Collision returns Collision:
	'element' classA=[Class|EString]'to' classB=[Class|EString] '->' action=[Trigger|EString]
;

ObjInit returns ObjInit:
	name=EString ':' class=[Class|EString] '[' posX=PosOrCamera ',' posY=PosOrCamera ',' posZ=PosOrCamera (',' rotation=EInt)? ']'
	('attributes' '{' attribute+=ObjAttribute (',' attribute+=ObjAttribute)* '}')?
	('rules' '{' rules+=Rule (',' rules+=Rule)* '}')?
;

PosOrCamera returns ecore::EDoubleObject:
    'camera' | EDouble;

PhysicChange returns PhysicChange:
	'do' action=Action
	(('in')? class=[Class|EString])?
	('named')? object=EString
	('at' position=Position)?
	('scale' scale=EDouble)?
	('stat' attribute=EString)?
	('changeStat' changeValue=EInt)?
	('force' force=[Force|EString])?
;

enum BasicActions returns BasicActions:
				start = 'start' | win = 'win' | lose = 'lose' | none = 'none' | restart = 'restart' ;

enum Action returns Action:
				create = 'create' | edit = 'edit' | delete = 'delete';

enum Position returns Position:
				front = 'front' | default = 'default' | back = 'back';

ObjAttribute returns ObjAttribute:
	attribute=[Attribute|EString] 'value' value=EString
;
Rule returns Rule:
	'do' action=[Trigger|EString] 'if(' condition=Condition ')'
;

Not returns Not:
	'!' left=Condition
;

Binary returns Binary:
	'(' left=Condition ')' op=LogicOps '(' right=Condition ')'
;

Arithmetic returns Arithmetic:
	left=Value op=ArithmOps right=Value
;

enum LogicOps returns LogicOps:
	And='&' | Or='|' ;

enum ArithmOps returns ArithmOps:
	equal='=' | greater='>' | greaterEqual='>=' | lower='<' | lowerEqual='<='
;
AttributeValue returns AttributeValue:
	class=EString '.' attribute=EString
;

ConstantValue returns ConstantValue:
	value=Constant
;

Constant returns ecore::EString:
	EInt | EString
;

AllInstances returns AllInstances:
	"Number" type=EString
;
